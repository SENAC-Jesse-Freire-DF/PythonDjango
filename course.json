{"createdAt":"2023-10-10T16:29:59.556Z","name":"Desenvolvimento Web Python Django","coverImage":"https://pixabay.com/get/g50d64f79fdaf53af506bf1e453889c3908507bcaf6680e552b35f2de0fd993907cbf33bebcbad17b6f001630419e5020_640.jpg","version":4,"overview":{"title":"Visão geral","content":"Neste curso, você irá aprender a desenvolver aplicações web utilizando a linguagem de programação Python e o framework Django. Desde o básico até os conceitos mais avançados, você terá a oportunidade de criar projetos práticos e funcionais, utilizando uma metodologia passo a passo. Ao final do curso, você estará apto a desenvolver suas próprias aplicações web e aplicar os princípios de desenvolvimento web utilizando o Django."},"format":"onepage","sections":{"wrapup":{"name":"Resumo","slug":"wrapup","short":"Resumo","order":5,"blocks":{"lis_OYgGGpSBf3":{"view":"checklist","type":"list","order":1,"items":{"ite_c5dNF1U1AO":{"order":1,"title":"Configuração do ambiente de desenvolvimento","content":"A configuração do ambiente de desenvolvimento no Desenvolvimento Web Python Django é essencial para garantir que todos os recursos e bibliotecas necessários estejam corretamente instalados e configurados. Durante o curso, aprendemos a fazer essa configuração de forma eficiente, garantindo um ambiente de desenvolvimento estável e produtivo."},"ite_GgAckkXHUc":{"title":"Modelos, migrações e banco de dados","order":3,"content":"O uso de modelos, migrações e banco de dados é uma parte fundamental do desenvolvimento web no Django. Durante o curso, aprendemos como criar e implementar modelos para representar os dados da aplicação, como gerenciar as migrações para manter o banco de dados atualizado e como interagir com o banco de dados por meio das operações CRUD."},"ite_6zYzl80dRT":{"content":"A criação e organização de projetos Django é fundamental para o desenvolvimento web no Python. Durante o curso, exploramos as melhores práticas para criar e estruturar projetos Django de maneira eficiente, garantindo um código limpo, modular e fácil de manter.","order":2,"title":"Criação e organização de projetos Django"}}}},"headline":"Vamos revisar o que acabamos de ver até agora"},"topic2_vE6JSljEix":{"short":"Criação","slug":"criacao","name":"Criação e organização de projetos Django","order":2,"blocks":{"htm-W5YwoFSt9m":{"order":1,"html":"<p>Neste tópico, vamos explorar a criação e organização de projetos Django. O Django é um framework de desenvolvimento web poderoso e flexível, e possui uma estrutura bem definida para facilitar a organização e o desenvolvimento de projetos.</p>\n<h3>Criando um novo projeto Django</h3>\n<p>Para criar um novo projeto Django, você precisa ter o Django instalado em seu ambiente de desenvolvimento. Certifique-se de ter o Django instalado executando o seguinte comando:</p>\n<pre><code class=\"language-shell\">pip install django\n</code></pre>\n<p>Uma vez instalado, você pode criar um novo projeto executando o seguinte comando:</p>\n<pre><code class=\"language-shell\">django-admin startproject nome_do_projeto\n</code></pre>\n<p>Isso criará um diretório com o nome do projeto, contendo todos os arquivos e pastas necessários para executar o projeto Django.</p>\n<h3>Estrutura de um projeto Django</h3>\n<p>A estrutura básica de um projeto Django é a seguinte:</p>\n<pre><code>nome_do_projeto/\n├── nome_do_projeto/\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n</code></pre>\n<ul>\n<li>O diretório <code>nome_do_projeto</code> na raiz é o diretório principal do projeto.</li>\n<li>O arquivo <code>settings.py</code> contém as configurações do projeto, como a base de dados, configurações de segurança e configurações do Django.</li>\n<li>O arquivo <code>urls.py</code> define as URLs disponíveis no projeto e os módulos do Django que serão responsáveis por processar essas URLs.</li>\n<li>O arquivo <code>manage.py</code> é uma interface de linha de comando que permite executar diferentes comandos relacionados ao projeto Django, como rodar o servidor de desenvolvimento, executar migrações, entre outros.</li>\n</ul>\n<h3>Organizando o código do projeto</h3>\n<p>Para organizar o código do projeto Django, é comum seguir a convenção chamada &quot;Django&#39;s App Structure&quot; (Estrutura de Aplicativo do Django). Essa estrutura envolve a criação de múltiplas aplicações dentro do projeto, cada uma com sua própria lógica e funcionalidade.</p>\n<p>Para criar uma nova aplicação, basta executar o seguinte comando no diretório raiz do projeto:</p>\n<pre><code class=\"language-shell\">python manage.py startapp nome_da_aplicacao\n</code></pre>\n<p>Isso criará um diretório com o nome da aplicação dentro do diretório <code>nome_do_projeto</code>, com os arquivos necessários para a nova aplicação.</p>\n<p>Uma vez criada uma aplicação, você pode adicionar essa aplicação ao arquivo <code>settings.py</code>, na lista <code>INSTALLED_APPS</code>. Isso permite que o Django reconheça a nova aplicação e inclua suas URLs e funcionalidades no projeto.</p>","type":"html"},"hig_uygizQNc1y":{"order":2,"content":"A criação e organização de projetos Django é fundamental para o desenvolvimento web no Python. Durante o curso, exploramos as melhores práticas para criar e estruturar projetos Django de maneira eficiente, garantindo um código limpo, modular e fácil de manter.","title":"Conclusão - Criação e organização de projetos Django","type":"highlight"}}},"qui_je0sZiY9Bo":{"headline":"Verifique seu conhecimento respondendo a algumas perguntas","name":"Questionário","blocks":{"sLlZX1Q0i3":{"questions":{"mul_686RNDyrkI":{"order":1,"question":"Qual é o nome do curso?","choices":{"cho_FVKZPsIuZ6":{"choice":"Desenvolvimento Mobile React Native","order":3,"correct":false},"cho_LsK8MYCQG3":{"correct":false,"order":2,"choice":"Desenvolvimento Web Java Spring"},"cho_HoXIGbKpir":{"choice":"Desenvolvimento Web Python Django","order":1,"correct":true}},"type":"multiple-choice"},"mul_6LEg9HgNHw":{"order":5,"choices":{"cho_2Xzf14FTPk":{"correct":false,"choice":"Configuração do ambiente de desenvolvimento","order":2},"cho_Ny6dQtwUEr":{"order":1,"correct":false,"choice":"Criação e organização de projetos Django"},"cho_YUNB9fPgOY":{"correct":true,"choice":"Modelos, migrações e banco de dados","order":3}},"type":"multiple-choice","question":"Qual é a quarta etapa do curso?"},"mul_YrAgTescB4":{"question":"Qual é a terceira etapa do curso?","choices":{"cho_4ICunwLrdP":{"correct":false,"choice":"Criação e organização de projetos Django","order":2},"cho_5NB88Az742":{"order":1,"choice":"Modelos, migrações e banco de dados","correct":true},"cho_sdQFb3myTP":{"choice":"Configuração do ambiente de desenvolvimento","order":3,"correct":false}},"order":4,"type":"multiple-choice"},"mul_E1I5MwLyE6":{"choices":{"cho_XDuuBPiVdN":{"correct":true,"choice":"Manipulação de dados com SQL","order":3},"cho_yg5c0vX9lc":{"order":2,"correct":false,"choice":"Criação e organização de projetos Django"},"cho_lct2SaoK1x":{"order":1,"choice":"Configuração do ambiente de desenvolvimento","correct":false}},"question":"Qual dos seguintes tópicos não é abordado no curso?","type":"multiple-choice","order":6},"mul_joCwOLrBh4":{"question":"Qual é a primeira etapa do curso?","type":"multiple-choice","choices":{"cho_IethdffJxd":{"order":1,"correct":false,"choice":"Criação e organização de projetos Django"},"cho_Zjq2HbZPpk":{"order":3,"choice":"Modelos, migrações e banco de dados","correct":false},"cho_JaUWVeSEWE":{"correct":true,"order":2,"choice":"Configuração do ambiente de desenvolvimento"}},"order":2},"mul_2Zygb0RZdP":{"choices":{"cho_JdoWImIn5O":{"correct":false,"order":1,"choice":"Configuração do ambiente de desenvolvimento"},"cho_CzMvHwHzgO":{"correct":true,"choice":"Criação e organização de projetos Django","order":2},"cho_SMj5nO6Sb2":{"choice":"Modelos, migrações e banco de dados","correct":false,"order":3}},"question":"Qual é a segunda etapa do curso?","order":3,"type":"multiple-choice"}},"config":{"showIntro":false,"gradedQuiz":true,"allowReview":"never","allowRetry":"never","randomizeQuestions":true,"showScore":true,"cannotProgressWhenFailed":false,"showCorrectAnswers":false,"showAllQuestionsInPage":true,"advanceOnSubmit":true,"showStudentAnswers":true},"type":"quiz","order":1,"labels":{"Review":"Rever","StartQuiz":"Iniciar teste","Question":"Pergunta","Retry":"Tentar novamente","PassingScore":"Pontuação de aprovação:","failed":"reprovado","YourScore":"Sua pontuação:","Submit":"Enviar","Advance":"Avançar","passed":"aprovado"}}},"slug":"quiz","short":"Questionário","order":6},"practice":{"short":"Prática","headline":"Vamos colocar seus conhecimentos em prática","slug":"practice","order":4,"name":"Exercícios Práticos","blocks":{"htm_R1XO1Il3Kr":{"type":"html","html":"<p>Nesta lição, colocaremos a teoria em prática por meio de atividades práticas. Clique nos itens abaixo para conferir cada exercício e desenvolver habilidades práticas que o ajudarão a ter sucesso na disciplina.</p>","order":1},"lis_CVhhFlCsIf":{"items":{"icGE0eZGSu":{"content":"Neste exercício, os alunos devem criar um modelo de dados para um blog simples. O modelo deve ter pelo menos os seguintes campos: 'titulo', 'conteudo', 'data_publicacao'. Os alunos devem seguir um tutorial que mostra como criar o modelo no arquivo 'models.py' do aplicativo 'blog' dentro do projeto Django. Além disso, eles devem criar uma migração para o modelo, usando o comando 'python manage.py makemigrations'. Por fim, os alunos devem carregar a migração no banco de dados usando o comando 'python manage.py migrate' e verificar se a tabela correspondente foi criada. Eles devem enviar um printscreen mostrando a criação da tabela no banco de dados.","order":3,"title":"Criação de um modelo de dados"},"JI81IpAlNq":{"title":"Criação de um projeto Django","order":2,"content":"Neste exercício, os alunos devem criar um novo projeto Django chamado 'blog'. Eles devem seguir um tutorial que explica como usar o comando 'django-admin startproject' para criar o projeto e verificar se tudo foi criado corretamente. Além disso, os alunos devem explorar a estrutura de pastas do projeto gerado pelo Django, identificando os principais arquivos e pastas. No final, eles devem enviar um printscreen mostrando a estrutura de pastas do projeto 'blog'."},"5UUZwvBWRJ":{"title":"Instalação do Python e Django","order":1,"content":"Neste exercício, os alunos devem realizar a instalação do Python e Django em seus computadores. Eles devem seguir um tutorial passo a passo que mostra como baixar e instalar as versões corretas do Python e Django. Além disso, os alunos devem verificar se a instalação foi bem-sucedida executando alguns comandos básicos do Django, como 'django-admin --version'. No final, eles devem comprovar a instalação enviando um printscreen do terminal mostrando a versão do Django instalada."}},"view":"accordion","type":"list","order":2}}},"topic3_QYuT65SFVy":{"short":"Modelos","name":"Modelos, migrações e banco de dados","blocks":{"hig_iyhO3vHUvm":{"type":"highlight","content":"O uso de modelos, migrações e banco de dados é uma parte fundamental do desenvolvimento web no Django. Durante o curso, aprendemos como criar e implementar modelos para representar os dados da aplicação, como gerenciar as migrações para manter o banco de dados atualizado e como interagir com o banco de dados por meio das operações CRUD.","title":"Conclusão - Modelos, migrações e banco de dados","order":2},"htm-w56xgZedr7":{"order":1,"html":"<p>Neste tópico, vamos explorar o conceito de modelos, migrações e banco de dados no desenvolvimento web utilizando Python e Django. O Django é um framework web poderoso que oferece um sistema ORM (Object-Relational Mapping) embutido, o que facilita a criação e manipulação de bancos de dados relacionais. </p>\n<h2>Modelos</h2>\n<p>No Django, um modelo é uma representação de um objeto no banco de dados. Em outras palavras, é uma classe Python que mapeia para uma tabela no banco de dados. Através dos modelos, podemos criar, ler, atualizar e excluir registros no banco de dados de forma fácil e eficiente.</p>\n<p>O Django utiliza uma sintaxe de alto nível para definir modelos. Cada modelo é definido como uma classe Python que herda da classe <code>django.db.models.Model</code>. Dentro dessa classe, definimos atributos que representam os campos da tabela. Existem vários tipos de campos disponíveis no Django, como <code>CharField</code>, <code>IntegerField</code>, <code>DateField</code>, entre outros. Também é possível definir relacionamentos entre modelos, como relacionamentos um-para-um, um-para-muitos e muitos-para-muitos.</p>\n<p>Além dos campos, podemos definir métodos dentro do modelo para implementar comportamentos específicos. Isso permite adicionar lógica ao modelo e realizar operações personalizadas no momento da criação, atualização ou exclusão de registros.</p>\n<h2>Migrações</h2>\n<p>Em qualquer aplicação web, é comum que a estrutura do banco de dados evolua ao longo do tempo. Por exemplo, podemos adicionar novos campos a uma tabela existente, criar novas tabelas ou até mesmo modificar a estrutura das tabelas existentes. </p>\n<p>Para gerenciar essas mudanças, o Django utiliza migrações. As migrações são arquivos Python que descrevem como as alterações no banco de dados devem ser aplicadas. Quando executamos uma migração, o Django cria ou altera a estrutura do banco de dados de acordo com as mudanças definidas nas migrações.</p>\n<p>As migrações são controladas pelo Django e são aplicadas de forma automática, garantindo que o banco de dados esteja sempre sincronizado com a estrutura definida nos modelos. Isso permite que a evolução do banco de dados seja rastreável e reversível, facilitando o gerenciamento de versões e a colaboração em equipe.</p>\n<h2>Banco de dados</h2>\n<p>O Django suporta vários bancos de dados relacionais, como PostgreSQL, MySQL, SQLite e Oracle. Podemos escolher o banco de dados que melhor se adequa às necessidades de nossa aplicação, e o Django abstrai as diferenças entre os bancos, permitindo que nosso código seja portável.</p>\n<p>Para configurar o banco de dados em uma aplicação Django, precisamos definir as configurações de conexão no arquivo <code>settings.py</code>. Nesse arquivo, especificamos o tipo de banco de dados, o nome do banco, o usuário, a senha e outras opções de configuração específicas do banco em questão. Também podemos definir várias conexões de banco de dados para trabalhar com múltiplos bancos em uma única aplicação.</p>\n<p>Além disso, o Django oferece recursos adicionais para trabalhar com bancos de dados, como consultas complexas, filtros, agregações e transações. Essas funcionalidades permitem que desenvolvamos aplicações eficientes e escaláveis, manipulando grandes quantidades de dados de forma otimizada.</p>\n<p>Em resumo, modelos, migrações e banco de dados são elementos fundamentais no desenvolvimento web utilizando Python e Django. Os modelos nos permitem definir a estrutura do banco de dados e a lógica para manipular os registros. As migrações nos ajudam a gerenciar as alterações na estrutura do banco de dados de forma automatizada e controlada. E, por fim, o Django nos oferece suporte para trabalhar com uma variedade de bancos de dados relacionais, adequando-se às necessidades específicas da nossa aplicação.</p>","type":"html"}},"slug":"modelos","order":3},"topic1_hhe6bZBq47":{"slug":"configuracao","short":"Configuração","order":1,"name":"Configuração do ambiente de desenvolvimento","blocks":{"htm-2fhl3iBYRF":{"html":"<h2>Introdução</h2>\n<p>A configuração adequada do ambiente de desenvolvimento é um passo crucial para iniciar o desenvolvimento web com Python Django. Um ambiente de desenvolvimento bem configurado fornece as ferramentas e os recursos necessários para criar, testar e implantar aplicativos Django.</p>\n<h2>Etapas para configurar o ambiente de desenvolvimento</h2>\n<p>Para configurar o ambiente de desenvolvimento, siga estas etapas:</p>\n<h3>1. Instalar Python</h3>\n<p>O primeiro passo para configurar o ambiente de desenvolvimento Django é instalar o Python. Certifique-se de instalar a versão correta do Python compatível com o Django. Recomenda-se o uso da versão mais recente estável do Python.</p>\n<h3>2. Instalar Django</h3>\n<p>Após a instalação do Python, é necessário instalar o próprio Django. Isso pode ser feito usando o gerenciador de pacotes do Python, pip. Execute o comando <code>pip install django</code> para instalar o Django.</p>\n<h3>3. Configurar um ambiente virtual</h3>\n<p>É altamente recomendável criar um ambiente virtual para cada projeto Django. Um ambiente virtual isola as dependências de cada projeto, facilitando a manutenção e a compatibilidade das bibliotecas utilizadas. Para criar um ambiente virtual, execute o comando <code>python -m venv nome_do_ambiente</code> no terminal.</p>\n<h3>4. Ativar o ambiente virtual</h3>\n<p>Depois de criar o ambiente virtual, ative-o executando o comando apropriado de acordo com o sistema operacional. No Windows, o comando é <code>nome_do_ambiente\\Scripts\\activate</code>, e no macOS/Linux, é <code>source nome_do_ambiente/bin/activate</code>.</p>\n<h3>5. Instalar outras dependências</h3>\n<p>Além do Django, muitas vezes é necessário instalar outras dependências para o desenvolvimento web Python Django. Essas dependências podem incluir pacotes adicionais do Django, bibliotecas para banco de dados, ferramentas de teste, entre outras. Utilize o pip para instalar essas dependências, fornecendo os nomes e versões corretas.</p>\n<h3>6. Configurar um banco de dados</h3>\n<p>O Django suporta diferentes bancos de dados, como SQLite, MySQL, PostgreSQL, entre outros. É necessário configurar um banco de dados para armazenar os dados do aplicativo. Isso pode ser feito editando o arquivo de configuração <code>settings.py</code> do seu projeto, especificando as informações do banco de dados.</p>\n<h3>7. Executar migrações</h3>\n<p>Antes de iniciar o desenvolvimento, é importante executar as migrações do banco de dados. As migrações são responsáveis por criar as tabelas necessárias no banco de dados de acordo com a estrutura do seu aplicativo. Execute o comando <code>python manage.py migrate</code> no terminal para executar as migrações.</p>\n<h3>8. Iniciar o servidor de desenvolvimento</h3>\n<p>Por fim, inicie o servidor de desenvolvimento do Django para visualizar seu aplicativo no navegador. Execute o comando <code>python manage.py runserver</code> no terminal. O servidor será executado na porta padrão 8000. Abra o navegador e acesse <code>http://localhost:8000</code> para ver o aplicativo em execução.</p>","order":1,"type":"html"},"hig_bA2JqX2g43":{"order":2,"content":"A configuração do ambiente de desenvolvimento no Desenvolvimento Web Python Django é essencial para garantir que todos os recursos e bibliotecas necessários estejam corretamente instalados e configurados. Durante o curso, aprendemos a fazer essa configuração de forma eficiente, garantindo um ambiente de desenvolvimento estável e produtivo.","type":"highlight","title":"Conclusão - Configuração do ambiente de desenvolvimento"}}}},"languageId":"pt-BR","headline":"Aprenda a criar aplicações web poderosas com Python e Django","id":"KiXOXRSpcN59Es5f2MTM","keywords":{"keyword3":"Web Development","keyword5":"Framework","keyword2":"Django","keyword4":"Programming","keyword1":"Python"},"updatedAt":"2023-10-10T16:29:59.556Z","colorScheme":"green","folderId":null,"category":"Web Development","settings":{"showBrandInFooter":false,"showBackdrop":true},"viewCount":0,"conclusion":{"title":"Conclusão","content":"Parabéns por concluir este curso! Você deu um passo importante para liberar todo o seu potencial. Concluir este curso não é apenas adquirir conhecimento; trata-se de colocar esse conhecimento em prática e causar um impacto positivo no mundo ao seu redor."}}